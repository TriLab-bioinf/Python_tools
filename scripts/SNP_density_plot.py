from scipy.stats import uniform
from scipy.stats import randint
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.lines as lines
import pandas as pd
import argparse

# Process parameters

# Initialize parser
parser = argparse.ArgumentParser(
    description="This proram generates SNP-density plots from\na SNP density table generated by vcftools\n\n"
)

# Adding argument
parser.add_argument(
    "-i",
    "--input",
    help="SNP density file (snpden)",
    type=str,
    required=False,
    default="all.snpden",
)
parser.add_argument(
    "-c",
    "--chromosome",
    help="tabulated file with chromosome_ID <tab> size (in bp)",
    type=str,
    required=True,
    default="chromosome_size.txt",
)
parser.add_argument(
    "-o",
    "--output_prefix",
    help="output prefix",
    type=str,
    required=False,
    default="all",
)

args = parser.parse_args()
input_file = args.input
outputPrefix = args.output_prefix
chr_size_file = args.chromosome

# Read snpden file
snpden_df = pd.read_csv(input_file, sep="\t")
prefix = str(input_file).replace(".snpden", "")
prefix = prefix.replace("../", "")

# Read chromosome size file
chr_size_df = pd.read_csv(chr_size_file, sep="\t", header=None)

# Add start and end fake snps with 0 cov for each chromosome so
# they are plot in their entire lenght
for idx in chr_size_df.index:
    chr, size = [chr_size_df[0][idx], chr_size_df[1][idx]]
    df2 = {"CHROM": chr, "BIN_START": 0, "SNP_COUNT": 0, "VARIANTS/KB": 0}
    df3 = {
        "CHROM": chr,
        "BIN_START": size,
        "SNP_COUNT": 0,
        "VARIANTS/KB": 0,
    }
    snpden_df = snpden_df.append(df2, ignore_index=True)
    snpden_df = snpden_df.append(df3, ignore_index=True)

# print(snpden_df)

snpden_df = snpden_df.sort_values(by=["CHROM", "BIN_START"], ascending=True)
# print(snpden_df_sorted)

# print(df)
df = snpden_df
# print(df)
df.CHROM = df.CHROM.astype("category")
df.CHROM = df.CHROM.cat.set_categories(list(set(df.CHROM)), ordered=True)
myChromList = sorted(set(df.CHROM))

# print(myChromList)


# How to gene vs -log10(pvalue)
df["ind"] = range(len(df))
df_grouped = df.groupby(("CHROM"))

# for key, item in df_grouped:
#    print(df_grouped.get_group(key), "\n\n")


# Manhattan plot
fig = plt.figure(figsize=(14, 2))  # set fig size
ax = fig.add_subplot(111)
colors = ["blue", "grey"]
x_labels = []
x_labels_pos = []
if df["SNP_COUNT"].median() < 35:
    y_max = 35  # df["SNP_COUNT"].median() + (3 * df["SNP_COUNT"].std())
    y_min = -15
else:
    y_max = 700  # df["SNP_COUNT"].max() + 10
    y_min = -15

num = 0
# for num, (name, group) in enumerate(df_grouped, ):
for name in myChromList:
    group = df_grouped.get_group(name)
    # print(f"num= {num} ; name= {name} ; group = {group} ")
    group.plot(
        kind="scatter",
        x="ind",
        y="SNP_COUNT",
        s=2,
        color=colors[num % len(colors)],
        ax=ax,
    )
    x_labels.append(name)
    x_labels_pos.append(
        (group["ind"].iloc[-1] - (group["ind"].iloc[-1] - group["ind"].iloc[0]) / 2)
    )
    ax.axvline(group["ind"].iloc[-1] + 0.5, color="lightgray", ls=":", lw=1)
    num = num + 1

ax.set_xticks(x_labels_pos)
ax.set_xticklabels(x_labels)

# set axis limits
ax.set_xlim([0, len(df)])
ax.set_ylim([y_min, y_max])

# axis label
ax.set_xlabel("Chromosome")
ax.set_ylabel(f"{prefix}\nSNPs/10 kb blocks")

# show the graph
# plt.show()

plt.savefig(f"{outputPrefix}.SNP_density.pdf")

