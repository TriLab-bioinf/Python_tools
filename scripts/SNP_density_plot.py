import matplotlib.pyplot as plt
import pandas as pd
import argparse
import re


# Process parameters

# Initialize parser
parser = argparse.ArgumentParser(
    description="This proram generates SNP-density plots from\na SNP density table generated by vcftools\n\n"
)

# Adding argument
parser.add_argument(
    "-i",
    "--input",
    help="SNP density file (snpden)",
    type=str,
    required=False,
    default="all.snpden",
)
parser.add_argument(
    "-o",
    "--output_prefix",
    help="output prefix",
    type=str,
    required=False,
    default="all",
)
parser.add_argument(
    "-p",
    "--plot_type",
    help="Plot type [1: snp_density+read-depth; \
            2: norm_snp_density+read-depth; \
            3: snp_density+read_coverage; \
            4: snp_density+read-depth+read_coverage+median_snp_density_line]",
    type=int,
    required=False,
    default=4,
)
args = parser.parse_args()
input_file = args.input
outputPrefix = args.output_prefix
plot_type = args.plot_type


# Read snpden file
df = pd.read_csv(input_file, sep="\t")
prefix = str(input_file).replace(".snpden", "")
prefix = re.sub(r".*/", "", prefix)
df["IDX"] = df.index

# Set X-label coordinates
chrom_ids = sorted(set(df["CHROM"]))
chrom_pos = []
x_labels = []
x_labels_pos = []
for chr in chrom_ids:
    xmax = max(df.loc[df["CHROM"] == chr, "IDX"])
    xmin = min(df.loc[df["CHROM"] == chr, "IDX"])
    xmean = int((xmax - xmin) / 2)
    chrom_pos.append(max(df.loc[df["CHROM"] == chr, "IDX"]))
    x_labels.append(chr)
    x_labels_pos.append(xmin + xmean)


if df["SNP_COUNT"].median() < 35:
    y_max = 35  # df["SNP_COUNT"].median() + (3 * df["SNP_COUNT"].std())
else:
    y_max = 700  # df["SNP_COUNT"].max() + 10

########
# Plots
########

if plot_type == 1:
    fig, ax = plt.subplots(figsize=(24, 5))
    ax2 = ax.twinx()
    counter = 0
    for chr in chrom_ids:
        df2 = df.loc[df["CHROM"] == chr]
        df2.plot(
            x="IDX",
            y="SNP_COUNT",
            kind="scatter",
            color=["blue", "black"][(counter % 2)],
            ax=ax,
            s=2,
        )
        counter = counter + 1

    df.plot(
        x="IDX",
        y="DEPTH_MEAN",
        kind="line",
        color="green",
        alpha=0.3,
        ax=ax2,
        legend=None,
    )
    ax.set_xmargin(0)
    ax.set_ymargin(1)
    ax.set_ylabel(f"{prefix}\nSNP Density / 10kb")
    ax.set_ylim(0, y_max)
    ax2.set_ylabel("Mean Read Depth / 10kb")
    ax2.set_ylim(0, 200)
    ax.vlines(chrom_pos, ymin=-10, ymax=150, linestyle=":")
    ax.set_xticks(x_labels_pos)
    ax.set_xticklabels(x_labels)
    ax.set_xlabel("Chromosome")
    plt.savefig(f"{outputPrefix}.SNP_density.pdf")


if plot_type == 2:
    fig, ax = plt.subplots(figsize=(24, 4))
    ax2 = ax.twinx()
    counter = 0
    for chr in chrom_ids:
        df2 = df.loc[df["CHROM"] == chr]
        df2.plot(
            x="IDX",
            y="NORM_SNP_COUNT",
            kind="scatter",
            color=["blue", "black"][(counter % 2)],
            ax=ax,
            s=2,
        )
        counter = counter + 1

    df.plot(
        x="IDX",
        y="DEPTH_MEAN",
        kind="line",
        color="green",
        alpha=0.3,
        ax=ax2,
        legend=None,
    )
    ax.set_xmargin(0)
    ax.set_ymargin(1)
    ax.set_ylabel(f"{prefix}\nNorm. SNP Density / 10kb")
    ax.set_ylim(0, y_max)
    ax2.set_ylabel("Mean Read Depth / 10kb")
    ax2.set_ylim(0, 200)
    ax.vlines(chrom_pos, ymin=-10, ymax=150, linestyle=":")
    ax.set_xticks(x_labels_pos)
    ax.set_xticklabels(x_labels)
    ax.set_xlabel("Chromosome")
    plt.savefig(f"{outputPrefix}.SNP_density.pdf")


if plot_type == 3:
    fig, ax = plt.subplots(figsize=(24, 4))
    ax2 = ax.twinx()
    counter = 0
    for chr in chrom_ids:
        df2 = df.loc[df["CHROM"] == chr]
        df2.plot(
            x="IDX",
            y="SNP_COUNT",
            kind="scatter",
            color=["blue", "black"][(counter % 2)],
            ax=ax,
            s=2,
        )
        counter = counter + 1

    df.plot(
        x="IDX",
        y="WINDOW_COV",
        kind="line",
        color="grey",
        alpha=0.3,
        ax=ax2,
        legend=None,
    )
    ax.set_xmargin(0)
    ax.set_ymargin(1)
    ax.set_ylabel(f"{prefix}\nSNP Density / 10kb")
    ax.set_ylim(0, y_max)
    ax2.set_ylabel("Read Coverage / 10kb (%)")
    ax2.set_ylim(0, 110)
    ax.vlines(chrom_pos, ymin=-10, ymax=150, linestyle=":")
    ax.set_xticks(x_labels_pos)
    ax.set_xticklabels(x_labels)
    ax.set_xlabel("Chromosome")
    plt.savefig(f"{outputPrefix}.SNP_density.pdf")

if plot_type == 4:
    y_median_list = list()
    fig, ax = plt.subplots(figsize=(24, 4),)
    fig.subplots_adjust(right=0.75)
    ax2 = ax.twinx()
    ax3 = ax.twinx()
    counter = 0  # counter will set the color of dots in the scatter plot below
    # Replace DEPTH_MEAN (read depth) values >= 50 with 50, so we can expand the bottom part of the read depth axis
    # df.loc[df["DEPTH_MEAN"] > 49, "DEPTH_MEAN"] = 50
    df["DEPTH_MEAN"] = [50 if depth > 49 else depth for depth in df["DEPTH_MEAN"]]
    # df["DEPTH_MEAN"].loc[df["DEPTH_MEAN"] > 49] = 50

    for chr in chrom_ids:
        df2 = df.loc[df["CHROM"] == chr]  # Select rows by chromosome
        df3 = df2.loc[
            df2["SNP_COUNT"] > -1
        ]  # Select rows with SNP count >= 0 (regions with read info available)
        y_median = df3[
            "SNP_COUNT"
        ].median()  # Calculate median SNP count per chromosome, ignoring regions without read info
<<<<<<< HEAD
        norm_snp_counts_across_chr_per_10kb = df3[
            "NORM_SNP_COUNT"
        ].median()  # Calculate median SNP count per chromosome, ignoring regions without read info
=======
        norm_snp_counts_across_chr_per_10kb = (
            df3["SNP_COUNT"].sum() * 10000 / ((df3["WINDOW_COV"].sum() / 100) * 10000)
        )  # Calculate median SNP count per chromosome, ignoring regions without read info
>>>>>>> 1f91dc873e3f42d7e22c1cccdbbe1535717d7841

        y_median_list.append(norm_snp_counts_across_chr_per_10kb)

        # print(f"Median SNP density for chr {chr} = {y_median}")

        df2.plot(  # Plot SNP density per 10 kb
            x="IDX",
            y="NORM_SNP_COUNT",
            kind="scatter",
            color=["blue", "black"][(counter % 2)],
            ax=ax,
            s=2,
        )
        if (
            df3.index.size > 0
        ):  # Plot horizontal line based on median SNP density / chromosome
            ax.hlines(
                norm_snp_counts_across_chr_per_10kb,
                xmin=min(df2.index),
                xmax=max(df2.index),
                linestyle=(0, (5, 5)),
                alpha=0.5,
                color="red",
            )

        counter = counter + 1

    df.plot(  # Plot read coverage percent
        x="IDX",
        y="WINDOW_COV",
        kind="line",
        color="grey",
        alpha=0.3,
        ax=ax2,
        legend=None,
    )
    df.plot(  # Plot read depth / 10 kb
        x="IDX",
        y="DEPTH_MEAN",
        kind="line",
        color="green",
        alpha=0.3,
        ax=ax3,
        legend=None,
    )

    # Set ranges for X and Y axes
    ax3.spines["right"].set_position(
        ("axes", 1.05)
    )  # Set shift of 3rd y-axis (Read depth / 10 kb)
    ax.set_xmargin(0)
    ax.set_ylabel(f"{prefix}\nNormalized SNP Density / 10kb")
    if max(y_median_list) > 35:
        y_max = 700
    ax.set_ylim(-0.3, y_max)
    ax.vlines(chrom_pos, ymin=-5, ymax=y_max, linestyle=":")
    ax.set_xticks(x_labels_pos)
    ax.set_xticklabels(x_labels)
    ax.set_xlabel("Chromosome")

    ax2.set_ylabel("Read Coverage / 10kb (%)", color="grey")
    ax2.set_ylim(0, 110)
    ax2.set_xmargin(0)

    ax3.set_ylabel("Read Depth / 10kb", color="green")
    ax3.set_ylim(0, 52)  # max(df["DEPTH_MEAN"] + 10))
    ax3.set_xmargin(0)

    # Save plot as PDF
    plt.savefig(f"{outputPrefix}.SNP_density.pdf")

